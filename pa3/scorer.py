"""
PA-3 Word Sense Disambiguation.
Sajesh Sahoo
3-11-2024
CMSC-416

#The purpose of this program is to compare the results we obtained from wsd.py, with the given results named line-key.txt, the accuracy of the file generated by wsd.py, is calulated
as well as the confusion matrix is also generated in this program.

#To use this program, have this program file in the same location as the other files, then open the command prompt and use Cd ..
to locate the directory all ur files are located at, Ex. cd desktop.
you can either use python or python3 if u have it installed:
python scorer.py my-line-answers.txt line-key.txt
or python3 scorer.py my-line-answers.txt line-key.txt

#the output of this program should look something like:
Accuracy = 57.937 %
Baseline Accuraxy = 57.143 %
Actual     phone  product  All
Predicted
phone         72        0   72
product       54        1   55
All          126        1  127

#The Algorithm:
Read the files provided as input, split the data into lines to compare, compare the 2 files, and if a line from my-line matches the line from key,
consider it as correct, and calculate the percentage based on the total lines.then iterate through each pair of line from both files, comapre the lines to predict the sense
if a line from my-line matches, and depending on if they match or not determine, wehter it is actual or predicted, then generate the confusion matrix, based on the actual and predicted.

the actual output:
Accuracy = 57.937 %
Baseline Accuraxy = 57.143 %
Actual     phone  product  All
Predicted
phone         72        0   72
product       54        1   55
All          126        1  127

"""
import sys
import re
import pandas as pd

#read file
def read_file(file_path):
    with open(file_path, "r") as file:
        return file.read()
#split data into lines
def split_lines(data):
    return data.split("\n")
#calculate accuracy
def calculate_accuracy(correct_count, total_count):
    return round((correct_count / total_count) * 100, 3)
#calculate the baseline accuracy
def get_baseline_accuracy(key_data, line_count):
    phone_count = len(re.findall(r'senseid=("phone")', key_data))
    return round((phone_count / line_count) * 100,3)

#count lines
def count_lines(file_path):
    with open(file_path, "r") as file:
        return sum(1 for line in file)

#predict the sense by comparing the answers to the given 
def predict_senses(my_data_split, key_data_split):
    #create lists for predicted and actual
    predicted = []
    actual = []
    #iterate through each line of the files. 
    for my_line, key_line in zip(my_data_split, key_data_split):
        #check if the lines match
        if my_line == key_line:
            #determine the actual or predicted based on the line
            if re.search(r'senseid=("phone")', key_line):
                actual.append('phone')
                predicted.append('phone')
            else:
                actual.append('product')
                predicted.append('product')
        else:
            #if lines dont match, predict based on the key
            if re.search(r'senseid=("product")', key_line):
                actual.append('phone')
                predicted.append('product')
            else:
                actual.append('product')
                predicted.append('phone')
    return predicted, actual

#create the function matrix
def create_confusion_matrix(predicted, actual):
    My_line_answer_list = pd.Series(predicted, name="Predicted")
    Key_line_list = pd.Series(actual, name="Actual")
    return pd.crosstab(My_line_answer_list, Key_line_list, margins=True)

def main():
    #get files from cdm 
    my_ans = sys.argv[1]
    key = sys.argv[2]

    #read files
    my_data = read_file(my_ans)
    key_data = read_file(key)

    #split into lines
    my_data_split = split_lines(my_data)
    key_data_split = split_lines(key_data)

    #count the number of lines 
    line_count = count_lines(my_ans)

    #calculate the accuracy by comparing the lines
    correct = list(set(my_data_split) & set(key_data_split))

    #calculate the accuracy.
    acc = calculate_accuracy(len(correct), line_count)
    
    #calculate the baseline accuracy
    baseline = get_baseline_accuracy(key_data, line_count)

    #predict based on the comparesions, and create the confusion matrix. 
    predicted, actual = predict_senses(my_data_split, key_data_split)

    confusionMatrix = create_confusion_matrix(predicted, actual)

    print("Accuracy = " + str(acc) + " %")
    print("Baseline Accuraxy = " + str(baseline) + " %")
    print(confusionMatrix)

if __name__ == "__main__":
    main()
